//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__FLATTEN__11_H
# define OPERATOR_OPERATOR__AI_ONNX__FLATTEN__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Flatten' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Flatten
 * Flattens the input tensor into a 2D matrix. If input tensor has shape (d_0, d_1, ... d_n) then the output will have shape (d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).
 * 
 * Version
 * This version of the operator has been available since version 13 of the default ONNX operator set.
 *
 * Other versions of this operator: 1, 9, 11
 *
 * Attributes
 * axis : int (default is 1)
 * Indicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output. 
 * The value for axis must be in the range [-r, r], where r is the rank of the input tensor. 
 * Negative value means counting dimensions from the back. When axis = 0, 
 * the shape of the output tensor is (1, (d_0 X d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ... d_n).
 *
 * Inputs
 * input (differentiable) : T
 * A tensor of rank >= axis.
 *
 * Outputs
 * output (differentiable) : T
 * A 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output 
 * and remaining input dimensions flattened into the inner dimension of the output.
 *
 * Type Constraints
 * T : tensor(uint8), tensor(uint16), tensor(uint32), tensor(uint64), tensor(int8), tensor(int16), tensor(int32), tensor(int64), tensor(bfloat16), tensor(float16), tensor(float), tensor(double), tensor(string), tensor(bool), tensor(complex64), tensor(complex128)
 * Constrain input and output to all tensor types.
 *
 * @since version 11
 *
 * @see tmp/pip-req-build-t1yqduuy/onnx/defs/nn/defs.cc:1446
 * @see https://github.com/onnx/onnx/blob/main/docs/Operators.md#flatten
 */

operator_status
prepare_operator__ai_onnx__flatten__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__flatten__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__flatten__11;

operator_executer
resolve_operator__ai_onnx__flatten__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_float(
    node_context *ctx
);

# endif